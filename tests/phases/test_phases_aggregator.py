import json
import pytest
from pathlib import Path

from mam_analyzer.phases.phases_aggregator import PhasesAggregator
from mam_analyzer.parser import load_flight_data
from mam_analyzer.utils.parsing import parse_timestamp

DATA_DIR = Path("data")

@pytest.mark.parametrize(
    "filename, expected_phases",
    [
        (
            "UHSH-UHMM-B350.json",
            [
                ("startup","2025-05-17T17:35:51.243573","2025-05-17T17:52:11.248829"),
                ("taxi","2025-05-17T17:52:11.248830","2025-05-17T17:55:53.265563"),
                ("takeoff","2025-05-17T17:55:53.265564","2025-05-17T17:57:09.244587"),
                ("unknown","2025-05-17T17:57:09.244588","2025-05-17T18:13:39.246421"),
                ("cruise","2025-05-17T18:13:39.246422","2025-05-17T19:13:55.253485"),
                ("unknown","2025-05-17T19:13:55.253486","2025-05-17T19:38:01.243374"),
                ("approach","2025-05-17T19:38:01.243375","2025-05-17T19:41:01.243374"),
                ("final_landing","2025-05-17T19:41:01.243375","2025-05-17T19:42:55.253030"),
                ("taxi","2025-05-17T19:42:55.253031","2025-05-17T19:44:49.246589"),
                ("shutdown","2025-05-17T19:44:49.246590","2025-05-17T19:46:07.259129"),
            ],
        ),
        (
            "LEPA-LEPP-737.json",
            [
                ("startup","2025-06-14 17:03:35.597526","2025-06-14 17:10:41.905204"),
                ("taxi","2025-06-14 17:10:41.905205","2025-06-14 17:17:35.879138"),
                ("takeoff","2025-06-14 17:17:35.879139","2025-06-14 17:19:23.889964"),
                ("unknown","2025-06-14 17:19:23.889965","2025-06-14 17:29:25.891624"),
                ("cruise","2025-06-14 17:29:25.891625","2025-06-14 17:53:55.877102"),
                ("unknown","2025-06-14 17:53:55.877103","2025-06-14 18:19:03.883980"),
                ("approach","2025-06-14 18:19:03.883981","2025-06-14 18:22:03.883980"),
                ("final_landing","2025-06-14 18:22:03.883981","2025-06-14 18:22:43.875768"),
                ("taxi","2025-06-14 18:22:43.875769","2025-06-14 18:26:59.877935"),
                ("shutdown","2025-06-14 18:26:59.877936","2025-06-14 18:29:23.900345"),
            ],
        ),
        (
            "UHPT-UHMA-SF34.json",
            [
                ("startup","2025-06-05T12:59:29.214934","2025-06-05T13:03:33.236164"),
                ("taxi","2025-06-05T13:03:33.236165","2025-06-05T13:07:59.224559"),
                ("takeoff","2025-06-05T13:07:59.224560","2025-06-05T13:09:09.229698"),
                ("unknown","2025-06-05T13:09:09.229699","2025-06-05T13:19:55.226943"),
                ("cruise","2025-06-05T13:19:55.226944","2025-06-05T14:28:41.236179"),
                ("unknown","2025-06-05T14:28:41.236180","2025-06-05T15:02:21.226651"),
                ("approach","2025-06-05T15:02:21.226652","2025-06-05T15:05:21.226651"),
                ("final_landing","2025-06-05T15:05:21.226652","2025-06-05T15:07:23.212915"),
                ("taxi","2025-06-05T15:07:23.212916","2025-06-05T15:10:25.234294"),
                ("shutdown","2025-06-05T15:10:25.234295","2025-06-05T15:11:27.226299"),
            ],
        ),
        (
            "LEPA-LEPP-737.json",
            [
                ("startup","2025-06-14T17:03:35.597526","2025-06-14T17:10:41.905204"),
                ("taxi","2025-06-14T17:10:41.905205","2025-06-14T17:17:35.879138"),
                ("takeoff","2025-06-14T17:17:35.879139","2025-06-14T17:19:23.889964"),
                ("unknown","2025-06-14T17:19:23.889965","2025-06-14T17:29:25.891624"),
                ("cruise","2025-06-14T17:29:25.891625","2025-06-14T17:53:55.877102"),
                ("unknown","2025-06-14T17:53:55.877103","2025-06-14T18:19:03.883980"),
                ("approach","2025-06-14T18:19:03.883981","2025-06-14T18:22:03.883980"),
                ("final_landing","2025-06-14T18:22:03.883981","2025-06-14T18:22:43.875768"),
                ("taxi","2025-06-14T18:22:43.875769","2025-06-14T18:26:59.877935"),
                ("shutdown","2025-06-14T18:26:59.877936","2025-06-14T18:29:23.900345"),
            ],
        ),
        (
            "PAOM-PANC-B350-fromtaxi.json",
            [
                ("taxi","2025-06-22T22:22:52.551736","2025-06-22T22:24:54.563528"),
                ("takeoff","2025-06-22T22:24:54.563529","2025-06-22T22:26:42.559020"),
                ("unknown","2025-06-22T22:26:42.559021","2025-06-22T22:42:46.564259"),
                ("cruise","2025-06-22T22:42:46.564260","2025-06-22T23:49:56.574365"),
                ("unknown","2025-06-22T23:49:56.574366","2025-06-23T00:12:48.552043"),
                ("approach","2025-06-23T00:12:48.552044","2025-06-23T00:15:48.552043"),
                ("final_landing","2025-06-23T00:15:48.552044","2025-06-23T00:16:16.574740"),
                ("taxi","2025-06-23T00:16:16.574741","2025-06-23T00:24:58.562115"),
                ("shutdown","2025-06-23T00:24:58.562116","2025-06-23T00:37:10.553074"),
            ],
        ),
        (
            "UHPT-UHMA-B350.json",
            [
                ("startup","2025-06-15T17:58:20.804091","2025-06-15T18:12:32.825494"),
                ("taxi","2025-06-15T18:12:32.825495","2025-06-15T18:17:20.817033"),
                ("takeoff","2025-06-15T18:17:20.817034","2025-06-15T18:18:16.828107"),
                ("unknown","2025-06-15T18:18:16.828108","2025-06-15T18:33:34.828859"),
                ("cruise","2025-06-15T18:33:34.828860","2025-06-15T19:31:56.813907"),
                ("unknown","2025-06-15T19:31:56.813908","2025-06-15T19:58:00.819105"),
                ("approach","2025-06-15T19:58:00.819106","2025-06-15T20:01:00.819105"),
                ("final_landing","2025-06-15T20:01:00.819106","2025-06-15T20:03:02.810866"),
                ("taxi","2025-06-15T20:03:02.810867","2025-06-15T20:09:06.816801"),
                ("shutdown","2025-06-15T20:09:06.816802","2025-06-15T20:09:08.827907"),
            ],
        ),
        (
            "UHMA-PAOM-B350.json",
            [
                ("startup","2025-06-15T21:57:38.571938","2025-06-15T22:16:58.578380"),
                ("taxi","2025-06-15T22:16:58.578381","2025-06-15T22:19:44.582974"),
                ("takeoff","2025-06-15T22:19:44.582975","2025-06-15T22:20:50.577950"),
                ("unknown","2025-06-15T22:20:50.577951","2025-06-15T23:11:10.583402"),
                ("cruise","2025-06-15T23:11:10.583403","2025-06-15T23:40:06.583488"),
                ("unknown","2025-06-15T23:40:06.583489","2025-06-16T00:04:26.575322"),
                ("approach","2025-06-16T00:04:26.575323","2025-06-16T00:07:26.575322"),
                ("final_landing","2025-06-16T00:07:26.575323","2025-06-16T00:07:44.576125"),
                ("taxi","2025-06-16T00:07:44.576126","2025-06-16T00:12:10.586580"),
                ("shutdown","2025-06-16T00:12:10.586581","2025-06-16T00:21:44.580993"),
            ],
        ),
        (
            "LEBB-touchgoLEXJ-LEAS.json",
            [
                ("startup","2025-07-04T22:34:41.309304","2025-07-04T22:42:53.319155"),
                ("taxi","2025-07-04T22:42:53.319156","2025-07-04T22:47:29.326812"),
                ("takeoff","2025-07-04T22:47:29.326813","2025-07-04T22:48:17.308345"),
                ("cruise","2025-07-04T22:48:17.308346","2025-07-04T23:04:23.315418"),
                ("approach","2025-07-04T23:04:23.315419","2025-07-04T23:07:23.315418"),
                ("touch_go","2025-07-04T23:07:23.315419","2025-07-04T23:08:17.307843"),
                ("unknown","2025-07-04T23:08:17.307844","2025-07-04T23:11:49.315744"),
                ("cruise","2025-07-04T23:11:49.315745","2025-07-04T23:22:03.329334"),
                ("unknown","2025-07-04T23:22:03.329335","2025-07-04T23:41:13.316485"),
                ("approach","2025-07-04T23:41:13.316486","2025-07-04T23:44:13.316485"),
                ("final_landing","2025-07-04T23:44:13.316486","2025-07-04T23:44:13.316486"),
                ("taxi","2025-07-04T23:44:13.316487","2025-07-04T23:44:15.327441"),
            ],
        ),
        (
            "LPMA-Circuits-737.json",
            [
                ("startup","2025-06-02T21:17:25.732706","2025-06-02T21:43:03.739526"),
                ("taxi","2025-06-02T21:43:03.739527","2025-06-02T21:47:57.737803"),
                ("takeoff","2025-06-02T21:47:57.737804","2025-06-02T21:49:51.738548"),
                ("unknown","2025-06-02T21:49:51.738549","2025-06-02T22:01:09.738625"),
                ("approach","2025-06-02T22:01:09.738626","2025-06-02T22:04:09.738625"),
                ("touch_go","2025-06-02T22:04:09.738626","2025-06-02T22:05:15.740983"),
                ("unknown","2025-06-02T22:05:15.740984","2025-06-02T22:10:43.738623"),
                ("approach","2025-06-02T22:10:43.738624","2025-06-02T22:13:43.738623"),
                ("final_landing","2025-06-02T22:13:43.738624","2025-06-02T22:14:05.737714"),
            ],
        ),
        (
            "LEPP-LEMG-737.json",
            [
                ("startup","2025-06-14T23:26:04.962365","2025-06-14T23:46:28.960506"),
                ("taxi","2025-06-14T23:46:28.960507","2025-06-14T23:49:32.958062"),
                ("takeoff","2025-06-14T23:49:32.958063","2025-06-14T23:51:02.981245"),
                ("unknown","2025-06-14T23:51:02.981246","2025-06-15T00:02:56.950759"),
                ("cruise","2025-06-15T00:02:56.950760","2025-06-15T00:42:12.961101"),
                ("unknown","2025-06-15T00:42:12.961102","2025-06-15T01:05:58.959305"),
                ("approach","2025-06-15T01:05:58.959306","2025-06-15T01:08:58.959305"),
                ("final_landing","2025-06-15T01:08:58.959306","2025-06-15T01:09:24.968110"),
                ("taxi","2025-06-15T01:09:24.968111","2025-06-15T01:11:26.954066"),
                ("shutdown","2025-06-15T01:11:26.954067","2025-06-15T01:15:06.966054"),
            ],
        ),
    ],
)
def test_phases_aggregator(filename, expected_phases):
    file_path = DATA_DIR / filename
    events = load_flight_data(file_path)
    phases_aggregator = PhasesAggregator()

    expected_phases_formatted = []
    for name, start, end in expected_phases:
        start_datetime = parse_timestamp(start)
        end_datetime = parse_timestamp(end)
        expected_phases_formatted.append((name, start_datetime, end_datetime))

    phases = phases_aggregator.identify_phases(events)

    # Check expected phases are detected
    detected_ranges = [(p.name, p.start, p.end) for p in phases]
    assert detected_ranges == expected_phases_formatted, f"Expected {expected_phases_formatted} vs {detected_ranges} in {filename}"

    # Check the events are not reapeted among phases
    # Assume events have unique timestamp
    for e in events:
        phase_found = None
        for phase in phases:
            for ev in phase.events:
                if e._raw["Timestamp"] == ev._raw["Timestamp"]:
                    if phase_found is None:
                        phase_found = phase
                    else:
                        pytest.fail(
                            f"Event {e} found in multiple phases: "
                            f"{phase_found.name}, {phase.name}"
                        )

        if phase_found is None:
            # Check if there is a phase where it should be
            containing = [p for p in phases if p.contains(e)]
            if containing:
                pytest.fail(
                    f"Event {e} not assigned to any phase.events, "
                    f"but its timestamp is within phase ranges: "
                    f"{[p.name for p in containing]}"
                )

